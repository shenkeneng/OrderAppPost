package com.frxs.order.application;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import com.allenliu.versionchecklib.core.http.HttpParams;
import com.allenliu.versionchecklib.core.http.HttpRequestMethod;
import com.allenliu.versionchecklib.v2.AllenVersionChecker;
import com.allenliu.versionchecklib.v2.builder.DownloadBuilder;
import com.allenliu.versionchecklib.v2.builder.UIData;
import com.allenliu.versionchecklib.v2.callback.ForceUpdateListener;
import com.allenliu.versionchecklib.v2.callback.RequestVersionListener;
import com.ewu.core.utils.FileUtil;
import com.ewu.core.utils.JsonParser;
import com.ewu.core.utils.SerializableUtil;
import com.ewu.core.utils.SharedPreferencesHelper;
import com.ewu.core.utils.SystemUtils;
import com.ewu.core.utils.ToastUtils;
import com.frxs.order.FrxsActivity;
import com.frxs.order.R;
import com.frxs.order.comms.Config;
import com.frxs.order.comms.GlobelDefines;
import com.frxs.order.model.AppVersionGetRespData;
import com.frxs.order.model.BaseCartGoodsInfo;
import com.frxs.order.model.CartGoodsDetail;
import com.frxs.order.model.ColumnSwitchSet;
import com.frxs.order.model.ShopInfo;
import com.frxs.order.model.UserInfo;
import com.frxs.order.receiver.NetStateReceiver;
import com.frxs.order.rest.RestClient;
import com.frxs.order.rest.model.ApiResponse;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.umeng.analytics.MobclickAgent;
import org.greenrobot.eventbus.EventBus;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by ewu on 2016/2/18.
 */
public class FrxsApplication extends Application {
    private static FrxsApplication mInstance;
    public static Context context;
    private static RestClient restClient;
    private UserInfo mUserInfo;// 用户信息
    private int shopCartCount = 0; //购物车商品的数量
    private boolean needCheckUpgrade = true; // 是否需要检测更新
    private List<BaseCartGoodsInfo> cartGoodsInfoList = new ArrayList<BaseCartGoodsInfo>();
    private ColumnSwitchSet columnSwitchSet; //保存模块显示开关参数
    private List<CartGoodsDetail> mCartGoodsList; // 保存购物车数据（及时清空）
    private Activity mActivity;
    private DownloadBuilder builder;

    public static FrxsApplication getInstance() {
        if (mInstance == null) {
            throw new IllegalStateException("Not yet initialized");
        }

        return mInstance;
    }

    @Override
    public void onCreate() {
        super.onCreate();

        if (mInstance != null) {
            throw new IllegalStateException("Not a singleton");
        }

        context = getApplicationContext();

        mInstance = this;

        initData();

        initRestClient();

        MobclickAgent.updateOnlineConfig(getApplicationContext());

        NetStateReceiver.registerNetworkStateReceiver(this);
    }

    private void initRestClient() {
        restClient = new RestClient(Config.getBaseUrl(getEnvironment()));
    }

    public static RestClient getRestClient() {
        return restClient;
    }

    private void initData() {
        // Get the user Info
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, Config.PREFS_NAME);
        String userStr = helper.getString(Config.KEY_USER, "");
        if (!TextUtils.isEmpty(userStr)) {
            Object object = null;
            try {
                object = SerializableUtil.str2Obj(userStr);
                if (null != object) {
                    mUserInfo = (UserInfo) object;
                }

            } catch (IOException e) {
                e.printStackTrace();
            }

        }

        //Get the Goods information of the sale cart
        String saleCartProductStr = FileUtil.readInternalStoragePrivate(this, GlobelDefines.SALE_CART_FILE_NAME);
        if (null != saleCartProductStr && saleCartProductStr.trim().length() > 0) {
            Type listType = new TypeToken<List<BaseCartGoodsInfo>>() { }.getType();
            List<BaseCartGoodsInfo> productList = JsonParser .fromJson(saleCartProductStr, listType);
            if (null != productList && productList.size() > 0) {
                cartGoodsInfoList.addAll(productList);
            }
        }
    }

    public void setUserInfo(UserInfo userInfo) {
        this.mUserInfo = userInfo;

        if (null != mUserInfo) {
            List<ShopInfo> shopList = mUserInfo.getShopList();
            //如果有且只有一个店铺，则当前店铺就是这个店铺
            if (null != shopList && shopList.size() == 1) {
                mUserInfo.setCurrenShopInfo(shopList.get(0));
            }
        }

        String userStr = "";
        try {
            userStr = SerializableUtil.obj2Str(userInfo);
        } catch (IOException e) {
            e.printStackTrace();
        }
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, Config.PREFS_NAME);
        helper.putValue(Config.KEY_USER, userStr);
    }

    public UserInfo getUserInfo() {
        if (null == mUserInfo) {
            initData();
        }

        return mUserInfo;
    }

    public void setStoreCart(List<CartGoodsDetail> cartGoodsList){
        this.mCartGoodsList = cartGoodsList;
    }

    public List<CartGoodsDetail> getStoreCart(){
        return mCartGoodsList;
    }

    public ShopInfo getmCurrentShopInfo() {
        return mUserInfo == null ? null : mUserInfo.getCurrenShopInfo();
    }

    public void setmCurrentShopInfo(ShopInfo mCurrentShopInfo) {
        mUserInfo.setCurrenShopInfo(mCurrentShopInfo);

        String userStr = "";
        try {
            userStr = SerializableUtil.obj2Str(mUserInfo);
        } catch (IOException e) {
            e.printStackTrace();
        }
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, Config.PREFS_NAME);
        helper.putValue(Config.KEY_USER, userStr);
    }

    public String getUserAccount() {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        return helper.getString(GlobelDefines.KEY_USER_ACCOUNT, "");
    }

    public void setUserAccount(String userAccount) {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        helper.putValue(GlobelDefines.KEY_USER_ACCOUNT, userAccount);
    }

    public void setEnvironment(int environmentId) {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        helper.putValue(GlobelDefines.KEY_ENVIRONMENT, environmentId);

        restClient = new RestClient(Config.getBaseUrl(environmentId));
    }

    public int getEnvironment() {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        return helper.getInt(GlobelDefines.KEY_ENVIRONMENT, Config.networkEnv);
    }

    /**
     * 保存支付方式
     * @param payType
     */
    public void setPayType(int payType) {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        helper.putValue(GlobelDefines.KEY_PAY_TYPE, payType);
    }

    /**
     * 获取支付方式
     * @return
     */
    public int getPayType(){
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        return helper.getInt(GlobelDefines.KEY_PAY_TYPE, 0);
    }

    /**
     * 保存门支付方式
     * @param isDisplayShopBill
     */
    public void setShopBillState(boolean isDisplayShopBill) {
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        helper.putValue(GlobelDefines.KEY_SHOP_BILL, isDisplayShopBill);
    }

    /**
     * 获取支付方式
     * @return
     */
    public boolean getShopBillState(){
        SharedPreferencesHelper helper = SharedPreferencesHelper.getInstance(this, GlobelDefines.PREFS_NAME);
        return helper.getBoolean(GlobelDefines.KEY_SHOP_BILL, false);
    }

    public int getShopCartCount() {
        return shopCartCount;
    }

    public void setShopCartCount(int shopCartCount) {
        this.shopCartCount = shopCartCount;
        EventBus.getDefault().post(shopCartCount);
    }

    public void addShopCartCount(int number) {
        this.shopCartCount += number;
        EventBus.getDefault().post(shopCartCount);
    }

    public boolean isNeedCheckUpgrade() {
        return needCheckUpgrade;
    }


    public void setColumnSwitchSet (ColumnSwitchSet switchSet) {
        this.columnSwitchSet = switchSet;
    }

    public ColumnSwitchSet getColumnSwitchSet() {
        return columnSwitchSet;
    }

    public double getSaleCartProductCount(String productId) {
        if (!TextUtils.isEmpty(productId)) {
            for (BaseCartGoodsInfo item : cartGoodsInfoList) {
                if (productId.equals(item.getProductId())) {
                    return item.getPreQty();
                }
            }
        }

        return 0;
    }

    /**
     * 更新本地缓存的购物车商品数量
     *
     * @param productId 商品ID
     * @param count 增加/减少的商品数量
     */
    public void updateSaleCartProduct(String productId, int count) {
        if (TextUtils.isEmpty(productId)) {
            return;
        }

        for (BaseCartGoodsInfo item : cartGoodsInfoList) {
            //如果已经在购物车当中则跟新数量，但如果数量小于等于0则，从购车中删除
            if (productId.equals(item.getProductId())) {
                count += item.getPreQty();

                if (count <= 0) {
                    cartGoodsInfoList.remove(item);
                } else {
                    item.setPreQty(count);
                }
                String fileContent = JsonParser.toJson(cartGoodsInfoList);
                FileUtil.writeInternalStoragePrivate(this, GlobelDefines.SALE_CART_FILE_NAME, fileContent);
                return;
            }
        }

        //如果不在购物车中，则新增到购物车
        if (count > 0) {
            BaseCartGoodsInfo cartGoodsInfo = new BaseCartGoodsInfo();
            cartGoodsInfo.setProductId(productId);
            cartGoodsInfo.setPreQty(count);
            cartGoodsInfoList.add(cartGoodsInfo);
            String fileContent = JsonParser.toJson(cartGoodsInfoList);
            FileUtil.writeInternalStoragePrivate(this, GlobelDefines.SALE_CART_FILE_NAME, fileContent);
        }
    }

    public void saveSaleCartProducts(List<BaseCartGoodsInfo> products) {
        cartGoodsInfoList.clear();

        if (null != products) {
            cartGoodsInfoList.addAll(products);
        }

        String fileContent = JsonParser.toJson(cartGoodsInfoList);
        FileUtil.writeInternalStoragePrivate(this, GlobelDefines.SALE_CART_FILE_NAME, fileContent);
    }

    /**
     * 更新版本的网路请求
     *
     * @param activity
     */
    public void prepare4Update(final Activity activity, final boolean isShow) {
        if (!SystemUtils.checkNet(this) || !SystemUtils.isNetworkAvailable(this)) {
            ToastUtils.show(this, "网络不可用");
            return;
        }
        mActivity = activity;
        ((FrxsActivity) mActivity).showProgressDialog();
        //开始检测了升级之后，设置标志位为不再检测升级
        if (needCheckUpgrade) {
            needCheckUpgrade = false;
        }

        String url = Config.getBaseUrl(getEnvironment()) + "api/AppVersion/AppVersionUpdateGet";
        HttpParams httpParams = new HttpParams();
        httpParams.put("SysType", 0); // 0:android;1:ios
        httpParams.put("AppType", 0); // 软件类型(0:兴盛店订货平台, 1:拣货APP. 2:兴盛店配送APP,3:装箱APP, 4:采购APP, 5:网络店订货平台,6：网络店配送APP)
        builder = AllenVersionChecker
                .getInstance()
                .requestVersion()
                .setRequestUrl(url)
                .setRequestMethod(HttpRequestMethod.POSTJSON)
                .setRequestParams(httpParams)
                .request(new RequestVersionListener() {
                    @Nullable
                    @Override
                    public UIData onRequestVersionSuccess(String result) {
                        ((FrxsActivity) mActivity).dismissProgressDialog();
                        Type type = new TypeToken<ApiResponse<AppVersionGetRespData>>() {
                        }.getType();
                        ApiResponse<AppVersionGetRespData> respData = new Gson().fromJson(result, type);
                        int versionCode = Integer.valueOf(SystemUtils.getVersionCode(getApplicationContext()));
                        if (respData.getData() == null) {
                            ToastUtils.show(activity, "更新接口无数据");
                            return null;
                        }
                        if (versionCode >= respData.getData().getCurCode()) {
                            ToastUtils.show(activity, "已是最新版本");
                            return null;
                        }
                        if (respData.getData().getUpdateFlag() == 0) {
                            return null;
                        }
                        if (respData.getData().getUpdateFlag() == 2) {
                            builder.setForceUpdateListener(new ForceUpdateListener() {
                                @Override
                                public void onShouldForceUpdate() {
                                    forceUpdate();
                                }
                            });
                        }
                        return crateUIData(respData.getData().getDownUrl(), respData.getData().getUpdateRemark());
                    }

                    @Override
                    public void onRequestVersionFailure(String message) {
                        ((FrxsActivity) mActivity).dismissProgressDialog();
                        ToastUtils.show(activity, "request failed");

                    }
                });
        builder.setShowNotification(true);
        builder.setShowDownloadingDialog(true);
        builder.setShowDownloadFailDialog(true);
        builder.setForceRedownload(true);
        builder.excuteMission(activity);
    }

    /**
     * @return
     * @important 使用请求版本功能，可以在这里设置downloadUrl
     * 这里可以构造UI需要显示的数据
     * UIData 内部是一个Bundle
     */
    private UIData crateUIData(String downloadUrl, String updateRemark) {
        UIData uiData = UIData.create();
        uiData.setTitle(getString(R.string.update_title));
        uiData.setDownloadUrl(downloadUrl);
        uiData.setContent(updateRemark);
        return uiData;
    }

    /**
     * 强制更新操作
     */
    private void forceUpdate() {
        mActivity.finish();
    }

    /**
     * 退出登录
     * 在这里做，如：清空用户信息，禁止接收消息之类的操作
     */
    public void logout() {
        // 清空用户信息
        setUserInfo(null);
        cartGoodsInfoList.clear();

        String fileContent = JsonParser.toJson(cartGoodsInfoList);
        FileUtil.writeInternalStoragePrivate(this, GlobelDefines.SALE_CART_FILE_NAME, fileContent);
    }

    @Override
    public void onLowMemory() {
        super.onLowMemory();
        NetStateReceiver.unRegisterNetworkStateReceiver(this);
    }
}
